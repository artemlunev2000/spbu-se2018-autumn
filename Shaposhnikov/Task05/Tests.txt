Test/
Sort	5	10	100	1k	10k	100k	1m	10m	100m

Bubble	0.00	0.00	0.00	0.01	0.39	31.85	n/a	n/a	n/a

Insert	0.00	0.00	0.00	0.00	0.06	5.45	n/a	n/a	n/a

Merge	0.00	0.00	0.00	0.00	0.00	0.03	0.28	2.77	n/a

Quick	0.00	0.00	0.00	0.00	0.00	0.01	0.18	1.62	20.60

Heap	0.00	0.00	0.00	0.00	0.00	0.06	0.47	11.30	161.09

Х	При малых количествах N разница между алгоритмами не критична. 
Х	Начиная с 10к, алгоритмы с квадратичной сложностью работают медленнее. Вследствие меньшего количества сравнений insertionSort быстрее bubbleSort.
Х	Алгоритмы, использующие выделение памяти, с возрастанием N все сильнее отстают от  quickSort'а. 
	HeapSort в связи с бќльшим количеством сравнений оказалась медленнее mergeSort'a, а тот отстал от qs'a из-за выделения памяти.
Х	Подытоживая, алгоритмы со сложностью O(n^2) куда хуже O*n(log n). QuickSort оказался самой эффективной сортировкой (да и в реализации проще).
*время замерялось Gprof'ом.


