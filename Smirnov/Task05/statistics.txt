    \  Строк      5        10        100        1K        10K       100K       1M        10M        100M
Алгоритм

bubble		0.000	  0.000	    0.000      0.000	 0.859	   106.569    n/a	n/a	    n/a

insertion	0.000	  0.000	    0.000      0.000	 0.546	   81.544     n/a 	n/a	    n/a

merge		0.000	  0.000	    0.000      0.000	 0.014	   0.063      0.813	15.157	    n/a

quick		0.000	  0.000	    0.000      0.000	 0.014	   0.047      0.625	12.973      170.837

radix           0.000     0.000	    0.000      0.000     0.000     0.016      0.593     12.311       n/a



1) В ходе эксперимента был написан генератор строк из латинских символов и знаков препинания, 
замеры времени произведены с помощью time.h (был опробован gprof, но в итоге выбран инструмент с
наибольшей точностью) для строк длины 5. В таблицу вносилось среднее значение после 5 замеров.


2) Утечки памяти выявлены с помощью drmemory, вердикт:

   NO ERRORS FOUND:
      0 unique,     0 total unaddressable access(es)
      0 unique,     0 total uninitialized access(es)
      0 unique,     0 total invalid heap argument(s)
      0 unique,     0 total GDI usage error(s)
      0 unique,     0 total handle leak(s)
      0 unique,     0 total warning(s)
      0 unique,     0 total,      0 byte(s) of leak(s)
      0 unique,     0 total,      0 byte(s) of possible leak(s)


3) Вывод:

     - Сортировки, работающие за O(n*logn) (а также O(n) - radix, но там есть константа) 
   при n > 10K работают значительно быстрее, чем сортировки с ассимптотикой O(n^2).

     - При n = 100M работает только quick, остальные неквадратичные сортировки - нет,
   из-за возможного переполнения стека в процессе работы.
